//---------------------------- BREAKPOINTS
// @include breakpoint(small){  }
// @include breakpoint(medium){  }
// @include breakpoint(large){ }

@mixin breakpoint($point) {
  @if $point == large { @media (min-width: 64em) { @content; } }
  @else if $point == medium { @media (min-width: 50em) { @content; } }
  @else if $point == small { @media (min-width: 40em) { @content; } }
}

// FOR MIXING depending on what outcome you want.
$warm: #E00606;
$cool: #0096FF;
$black:#000000;
$white:#ffffff;

// [#Base Color], [NAME], [Color to mix in # or 0 if not wanted]
$clr-1: (#75B9A5, 'Teal', $cool);
$clr-2: (#ED670D, 'Orange', $warm);
$clr-3: (#FFAC2C, 'Gold', $warm);
$clr-4: (#FAE09C, 'Yellow', $warm);
$clr-5: (#091B5E, 'Blue', 0);
$clr-6: (#7f7f7f, 'GRAY', $cool);

// This is not the total amount of scaled colors
//How many colors you want to scale up/down from your base color.
$scale: 4;
$scale-to: ($scale * 2) + 1;
$base-num: $scale + 1;

// PUT A CAP ON ALL THOSE ODD NUMBER SCALES
@function scaleCap($num, $mixer){
    $howLight: lightness($mixer);
    $divider: 100/(100 - $howLight);
    $cap: $num / $divider;
    @return $cap;
}

// Understands which color to choose for @color-contrast ---------------- NEW COLOR SCALE  Understands which color to choose for @color-contrast
@function color-choice($color) {
    @if (lightness( $color ) > 70) { @return darken( $color, 40% ); }
    @else { @return lighten( $color, 80% ); }
}
// Understands the brightness of the color for @color-contrast
@function brightness($color) { @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%; }

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark, $light) {
    @if $color == null { @return null; }
    @else {
        $color-brightness: brightness($color);
        $light-text-brightness: brightness($light);
        $dark-text-brightness: brightness($dark);
        @return if( abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
    }
}

// WHAT GETS SPIT OUT!
@mixin colorCode($ref, $name, $x, $output, $color-percent) {
    .#{$ref}.swatch-#{$x} {
        background:$output;
        color: color-contrast($output, $black, $white);
        &.chip::before { content:''$name+'-'+$color-percent;}
    }
}

@mixin mixIt($color, $name, $ref, $mixer) {
    $mix:; // Needs to exists before we try and set

    @for $i from 1 through $scale { // ---------- Tints
        $j: ($i - $base-num)*-1;
        $name-per: percentage($i/10);
        $percentage: percentage(($j/10)*2.25);
        // Mixing in the Mixer
        @if $mixer != 0 { $mix:mix($mixer, $white, scaleCap(4%, $mixer)); }
        @else { $mix: $white; }
        // Final Color Tint
        $tint: mix($mix, $color, $percentage);
        @include colorCode($ref, $name, $i, $tint, $name-per);
    }

    @include colorCode($ref, $name, 5, $color, 50%); //----------------- Base Color

    @for $i from ($base-num + 1) through $scale-to { // ---------------- Shades
        $name-per: percentage($i/10);
        $percentage: percentage((($i - $base-num)*2.25)/10);
        // Mixing in the Mixer
        @if $mixer != 0 { $mix:mix($mixer, $black, scaleCap(11%, $mixer)); }
        @else { $mix: $black; }
        // Final Color Shade
        $shade: mix($mix, $color, $percentage);
        @include colorCode($ref, $name, $i, $shade, $name-per);
    }
}

// WHAT TO MIX!!!!!
@include mixIt(nth($clr-1, 1), nth($clr-1, 2), 'clr-1', nth($clr-1, 3));
@include mixIt(nth($clr-2, 1), nth($clr-2, 2), 'clr-2', nth($clr-2, 3));
@include mixIt(nth($clr-3, 1), nth($clr-3, 2), 'clr-3', nth($clr-3, 3));
@include mixIt(nth($clr-4, 1), nth($clr-4, 2), 'clr-4', nth($clr-4, 3));
@include mixIt(nth($clr-5, 1), nth($clr-5, 2), 'clr-5', nth($clr-5, 3));
@include mixIt(nth($clr-6, 1), nth($clr-6, 2), 'clr-6', nth($clr-6, 3));

//////////////////////////////////////////////////////////////////////////////// NO JUNK

*, html {
  margin:0;
  padding:0;
}

body {
  font-family: "Helvetica Neue", Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
    margin:auto;
    max-width:1200px;
}

.flex { display: flex;}
.space-around { justify-content:space-around; }
.flex-wrap { flex-wrap: wrap;}
.flex-wrap-reverse { flex-wrap: wrap-reverse;}
.flex-column { flex-direction: column;}
.flex-column-reverse { flex-direction: column-reverse;}

.color-area {
    flex-direction: column-reverse;
    @include breakpoint(small){flex-direction: column;}
}

.palette {
    @include breakpoint(small){
        margin:2vh 2vw;
        .chip:nth-child(1) { margin-top:0; }
        .chip:last-child { margin-bottom:0; }
    }
}

.chip {
    box-sizing: border-box;
    display:flex;
    flex-direction: column;
    text-transform:uppercase;
    text-align:center;
    overflow:hidden;
    justify-content:center;
    align-items: center;
    font-weight: 400;
    letter-spacing:0.05ex;
    line-height:1.38;

    height: 25vw;
    width: 100vw;
    background:#000;
    font-size:5vw;

    &:before {
        white-space: pre;
        font-size:0.8em;
        font-weight:800;
        padding:0.3vh 0.5vh;
        border-radius:4px;
    }

    @include breakpoint(small){
        // height: 10vw;
        // width: 10vw;
        min-height:100px;
        min-width:100px;
        height:auto;
        width:180px;
        max-height: 168px;
        max-width: 168px;
        font-size:1.3vmax;
        // border-radius: 100%;
        // margin:-3vh 0 0 0;
    }
    @include breakpoint(large){ font-size:16px; }
}

.playground {
    $size: 100%;

    overflow:hidden;
    width:100vw;
    height:100vw;
    max-width:695px;
    max-height:695px;
    margin:auto;

    @include breakpoint(small){
        transition: height .3s ease, width .3s ease;
        width:75vw;
        height:75vw;
    }

    .x, .t, .bubs, .o {
        overflow:hidden;
        min-height: 50%;
        width: 50%;
        position:relative;

        > div {
            height:$size;
            width: $size;
            position:absolute;
        }
    }

    .x {
        :nth-child(1) {
            top:0;
            left:-88%;
            z-index:100;
            transform: rotate(45deg);
        }
        :nth-child(2) {
            top:-88%;
            left:0;
            z-index:100;
            transform: rotate(45deg);
        }
        :nth-child(3) {
            top:0;
            left:88%;
            z-index:100;
            transform: rotate(45deg);
        }
        :nth-child(4) {
            top:88%;
            left:0;
            z-index:100;
            transform: rotate(45deg);
        }
    }
    .t {
        :nth-child(1) {
            position: absolute;
            top:60%;
            left:60%;
            z-index:100;
        }
        :nth-child(2) {
            top:-60%;
            left:-60%;
            z-index:100;
        }
        :nth-child(3) {
            top:-60%;
            left:60%;
            z-index:100;
        }
        :nth-child(4) {
            top:60%;
            left:-60%;
            z-index:100;
        }
    }
    .bubs {
        :nth-child(1) {
            height:$size/3;
            width: $size/3;
            top:random(50) + 0%;
            left:random(50) + 0%;
            z-index:80;
            border-radius:100%;
        }
        :nth-child(2) {
            height:$size/3.4;
            width: $size/3.4;
            top:random(50) + 0%;
            right:random(50) + 0%;
            z-index:70;
            border-radius:100%;
        }
        :nth-child(3) {
            height:$size/2.4;
            width: $size/2.4;
            position:absolute;
            bottom:random(50) + 0%;
            left:random(50) + 0%;
            z-index:60;
            border-radius:100%;
        }
        :nth-child(4) {
            height:$size/4;
            width: $size/4;
            bottom:random(50) + 0%;
            right:random(50) + 0%;
            z-index:100;
            border-radius:100%;
        }
    }
    .o {
        :nth-child(1) {
            height:$size/1.6;
            width: $size/1.6;
            top:50%;
            left:50%;
            transform:translate(-50%,-50%);
            z-index:90;
            border-radius:100%;
        }
        :nth-child(2) {
            height:$size/2.8;
            width: $size/2.8;
            top:50%;
            left:50%;
            transform:translate(-50%,-50%);
            z-index:100;
            border-radius:100%;
        }
        :nth-child(3) {
            height:$size/1.2;
            width: $size/1.2;
            top:50%;
            left:50%;
            transform:translate(-50%,-50%);
            z-index:80;
            border-radius:100%;
        }
        :nth-child(4) {
            height:$size;
            width: $size;
            top:0;
            left:0;
            z-index:70;
            border-radius:100%;
        }
    }
}
